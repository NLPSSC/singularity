BootStrap: docker
From: debian:bookworm-slim

%arguments
  VERSION=0.1.0
  AUTHOR=dax.westerman@vumc.org
  MASTER_CONDA_ENV="conda_env"
  
%setup
    # Runs from outside the container during Bootstrap

    # During the build process, commands in the %setup section are first 
    # executed on the host system outside of the container after the base 
    # OS has been installed. You can reference the container file system 
    # with the $SINGULARITY_ROOTFS environment variable in the %setup section.

    # Note

    # Be careful with the %setup section! This scriptlet is executed 
    # outside of the container on the host system itself, and is executed
    # with elevated privileges. Commands in %setup can alter and potentially 
    # damage the host.

%files
    # The %files section allows you to copy files into the container with greater safety than using the %setup section.
    # %files [from <stage>]
    # <source> [<destination>]
    # ...

    # %app*
    # # In some circumstances, it may be redundant to build different containers 
    # # for each app with nearly equivalent dependencies. Singularity supports 
    # # installing apps within internal modules based on the concept of Standard 
    # # Container Integration Format (SCI-F) All the apps are handled by 
    # # Singularity at this point. More information on Apps here.


%environment
    # copied inside the singularity image in the file

    # The %environment section allows you to define environment variables
    # that will be set at runtime. Note that these variables are not made
    # available at build time by their inclusion in the %environment section.
    # This means that if you need the same variables during the build process,
    # you should also define them in your %post section. Specifically:

    # during build: The %environment section is written to a file in the
    # container metadata directory. This file is not sourced.

    # during runtime: The file in the container metadata directory is sourced.

    # You should use the same conventions that you would use in a .bashrc
    # or .profile file. Consider this example from the def file above:
    
    export LC_ALL=en_US.utf-8
    export LANG=en_US.utf-8
    export TZ=UTC
    export ANACONDA_ENVIRONMENT={{MASTER_CONDA_ENV}}
    source /opt/etc/bashrc

    
%post
    # Runs within the container during Bootstrap
        # This section is where you can download files from the internet with 
        # tools like git and wget, install new software and libraries, write 
        # configuration files, create new directories, etc.

    # Set up some required environment defaults
    export LC_ALL=en_US.utf-8
    export LANG=en_US.utf-8
    export TZ=UTC
    export ANACONDA_ENVIRONMENT={{MASTER_CONDA_ENV}}

    apt-get update
    
    # Alternate Anaconda3 Install
    apt-get install -y  curl \
                        which \
                        git \
                        openssh-client \
                        libgl1-mesa-glx \
                        libegl1-mesa \
                        libxrandr2 \
                        libxrandr2 \
                        libxss1 \
                        libxcursor1 \
                        libxcomposite1 \
                        libasound2 \
                        libxi6 \
                        libxtst6

    CONDA_INSTALLER_VERSION="2023.03-1"
    CONDA_INSTALLER_FILE="Anaconda3-${CONDA_INSTALLER_VERSION}-Linux-x86_64.sh"
    curl -O "https://repo.anaconda.com/archive/${CONDA_INSTALLER_FILE}"
    ANACONDA_INSTALL_PATH="${SINGULARITY_ROOTFS}/anaconda3"
    
    export PYTHON_VERSION="3.9"
    
    sh "${CONDA_INSTALLER_FILE}" -b -p "${ANACONDA_INSTALL_PATH}"

    export PATH="$ANACONDA_INSTALL_PATH/bin":$PATH

    SYSTEM_BASHRC=/opt/etc/bashrc

    mkdir /scratch /data /gpfs20 /gpfs21 /gpfs22 /gpfs23 /dors /nobackup /accre /cvmfs /panfs

    mkdir -p /opt/etc
    conda init bash
    /usr/bin/bash

    # conda activate
    # conda clean -a
    # conda create -y -n "${ANACONDA_ENVIRONMENT}" "python=${PYTHON_VERSION}"
    
    #  && \
    #     echo -e "#! /bin/bash\n\n# script to activate the conda environment" > ~/.bashrc && \
    #     conda init bash && \
    #     echo -e "\nconda activate ${ANACONDA_ENVIRONMENT}" >> ~/.bashrc && \
    #     # echo "echo \"Conda activation\"" >> ~/.bashrc && \
    #     conda clean -a && \
    #     cp ~/.bashrc $SYSTEM_BASHRC

    echo "alias ll=\"ls -la\"" >> ~/.bashrc

    cp ~/.bashrc $SYSTEM_BASHRC
    # cp ~/.bashrc /root/.bashrc

%runscript

    # This is where your code would go if you want it to run whenever the singularity image runs. If you would like to change inputs to your code, I recommend using the 'exec' function in singulatrity. Eg.,

    # singularity exec image_name.im python -c 'print('Hello World')'

%test

    # /anaconda3/bin/conda activate {{MASTER_CONDA_ENV}}
    # if [ -z "$(which python)" ]; then 
    #     echo "success"
    # else
    #     echo "fail"
    # fi

%labels
    Author {{AUTHOR}}
    Version {{VERSION}}

%help
    This container supplies a conda environment with GLIBC suffient
    to run GPT4ALL


